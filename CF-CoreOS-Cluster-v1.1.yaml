---
AWSTemplateFormatVersion: "2010-09-09"
Description: Launch a CoreOS cluster running swarm.
Mappings:
  VpcCidrs:
    ap-northeast-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    ap-northeast-2:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    ap-south-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    ap-southeast-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    ap-southeast-2:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    ca-central-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    cn-north-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    eu-central-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    eu-west-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    eu-west-2:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    sa-east-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    us-east-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    us-east-2:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    us-gov-west-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    us-west-1:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
    us-west-2:
      vpc: 10.203.0.0/16
      pubsubnet1: 10.203.0.0/24
      pubsubnet2: 10.203.1.0/24
      pubsubnet3: 10.203.2.0/24
  RegionMap:
    ap-northeast-1:
      AMI: ami-0674bd656e5bbd940
    ap-northeast-2:
      AMI:	ami-0dedec04918e56116
    ap-south-1:
      AMI: ami-0bdbad103cc31c037
    ap-southeast-1:
      AMI: ami-0e11019a200802b43
    ap-southeast-2:
      AMI: ami-094bde83db4642610
    ca-central-1:
      AMI: ami-0c119337e0f202885
    cn-north-1:
      AMI: ami-001e6f29a899df749
    cn-northwest-1:
      AMI: ami-00a0d2ef649391775
    eu-central-1:
      AMI: ami-00946a0f23931daac
    eu-west-1:
      AMI: ami-0cdf1816f4d8d634e
    eu-west-2:
      AMI: ami-0bf0bc4adb43e8fc7
    eu-west-3:
      AMI: ami-0a931bb3434fe57f0
    sa-east-1:
      AMI: ami-0c33cc9b83b72fae6
    us-east-1:
      AMI: ami-0089347d530e1f3e6
    us-east-2:
      AMI: ami-0b15c21563ba827f2
    us-gov-west-1:
      AMI: ami-c45638a5
    us-west-1:
      AMI: ami-09e198d9d9ef8052b
    us-west-2:
      AMI: ami-0b0f4f5f0c8c1a797
Parameters:
  InstanceType:
    Type: String
    Description: EC2 HVM instance type (t2.micro, m3.medium, etc).
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - m5.metal
    ConstraintDescription: Must be a valid EC2 HVM instance type.
    Default: t2.micro
  ClusterSize:
    Type: Number
    Default: "3"
    MinValue: "3"
    MaxValue: "12"
    Description: Number of nodes in the CoreOS cluster (3-12).
  DiscoveryURL:
    Type: String
    Description: A unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=4
    Default: ""
  AdvertisedIPAddress:
    Type: String
    Description: Use "private" if your etcd cluster is within one region or "public"
      if it spans regions or cloud providers.
    AllowedValues:
    - private
    - public
    Default: private
  AllowSSHFrom:
    Type: String
    Description: The net block (CIDR) from which SSH and docker on the master are
      available. Default is from anywhere (use with caution).
    Default: 0.0.0.0/0
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an EC2 Key Pair to allow SSH access to the master.
    Default: ""
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: Comma-delimited list of three VPC availability zones in which nodes
      are created.
    Default: eu-west-1a,eu-west-1b,eu-west-1c
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - Ref: AWS::Region
        - vpc
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - VPC
  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - Ref: AWS::Region
        - pubsubnet1
      AvailabilityZone:
        Fn::Select:
        - "0"
        - Ref: VpcAvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet1
  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - Ref: AWS::Region
        - pubsubnet2
      AvailabilityZone:
        Fn::Select:
        - "1"
        - Ref: VpcAvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet2
  PubSubnetAz3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Fn::FindInMap:
        - VpcCidrs
        - Ref: AWS::Region
        - pubsubnet3
      AvailabilityZone:
        Fn::Select:
        - "2"
        - Ref: VpcAvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet3
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubnetAz1
      RouteTableId:
        Ref: RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubnetAz2
      RouteTableId:
        Ref: RouteViaIgw
  PubSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubnetAz3
      RouteTableId:
        Ref: RouteViaIgw
  MasterCoreOSSecurityGroup:
    DependsOn: NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Master CoreOS SecurityGroup
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp:
          Ref: AllowSSHFrom
      - IpProtocol: tcp
        FromPort: "4243"
        ToPort: "4243"
        CidrIp:
          Ref: AllowSSHFrom
      - IpProtocol: tcp
        FromPort: "2375"
        ToPort: "2375"
        CidrIp:
          Ref: AllowSSHFrom
      - IpProtocol: tcp
        FromPort: "80"
        ToPort: "80"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: "4243"
        ToPort: "4243"
        SourceSecurityGroupId:
          Fn::GetAtt:
          - NodeCoreOSSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: "4001"
        ToPort: "4001"
        SourceSecurityGroupId:
          Fn::GetAtt:
          - NodeCoreOSSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: "2379"
        ToPort: "2379"
        SourceSecurityGroupId:
          Fn::GetAtt:
          - NodeCoreOSSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: "2380"
        ToPort: "2380"
        SourceSecurityGroupId:
          Fn::GetAtt:
          - NodeCoreOSSecurityGroup
          - GroupId
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Master-SG
  NodeCoreOSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Node CoreOS SecurityGroup
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp:
          Ref: AllowSSHFrom
      - IpProtocol: tcp
        FromPort: "80"
        ToPort: "80"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Node-SG
  NodeIngress4243:
    DependsOn: NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "4243"
      ToPort: "4243"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
  NodeIngress4001:
    DependsOn: NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "4001"
      ToPort: "4001"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
  NodeIngress2379:
    DependsOn: NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "2379"
      ToPort: "2379"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
  NodeIngress2380:
    DependsOn: NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "2380"
      ToPort: "2380"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
  MasterIngress4243:
    DependsOn:
    - MasterCoreOSSecurityGroup
    - NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "4243"
      ToPort: "4243"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - MasterCoreOSSecurityGroup
        - GroupId
  MasterIngress4001:
    DependsOn:
    - MasterCoreOSSecurityGroup
    - NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "4001"
      ToPort: "4001"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - MasterCoreOSSecurityGroup
        - GroupId
  MasterIngress2379:
    DependsOn:
    - MasterCoreOSSecurityGroup
    - NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "2379"
      ToPort: "2379"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - MasterCoreOSSecurityGroup
        - GroupId
  MasterIngress2380:
    DependsOn:
    - MasterCoreOSSecurityGroup
    - NodeCoreOSSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - NodeCoreOSSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: "2380"
      ToPort: "2380"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - MasterCoreOSSecurityGroup
        - GroupId
  MasterCoreOSInstance:
    DependsOn: InternetGateway
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
        - "0"
        - Ref: VpcAvailabilityZones
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeleteOnTermination: "true"
        DeviceIndex: "0"
        SubnetId:
          Ref: PubSubnetAz1
        GroupSet:
        - Ref: MasterCoreOSSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#cloud-config\n\n"
            - "coreos:\n"
            - "  etcd2:\n"
            - "    discovery: "
            - Ref: DiscoveryURL
            - "\n"
            - "    advertise-client-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2379\n"
            - "    initial-advertise-peer-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2380\n"
            - "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n"
            - "    listen-peer-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2380\n"
            - "  units:\n"
            - "    - name: docker-tcp.socket\n"
            - "      command: start\n"
            - "      enable: true\n"
            - "      content: |\n"
            - "        [Unit]\n"
            - "        Description=Docker Socket for the API\n\n"
            - "        [Socket]\n"
            - "        ListenStream=4243\n"
            - "        BindIPv6Only=both\n"
            - "        Service=docker.service\n\n"
            - "        [Install]\n"
            - "        WantedBy=sockets.target\n"
            - "    - name: etcd2.service\n"
            - "      command: start\n"
            - "    - name: fleet.service\n"
            - "      command: start\n"
            - "    - name: docker-swarm.service\n"
            - "      command: start\n"
            - "      content: |\n"
            - "        [Unit]\n"
            - "        Description=Swarm service\n"
            - "        After=docker.service\n\n"
            - "        [Service]\n"
            - "        Restart=no\n"
            - "        ExecStart=/usr/bin/docker run --name docker-swarm -d -p 2375:2375
              swarm manage etcd://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2379/swarm\n"
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Master
  CoreOSServerAsg:
    DependsOn: MasterCoreOSInstance
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Fn::Select:
        - "0"
        - Ref: VpcAvailabilityZones
      - Fn::Select:
        - "1"
        - Ref: VpcAvailabilityZones
      - Fn::Select:
        - "2"
        - Ref: VpcAvailabilityZones
      VPCZoneIdentifier:
      - Fn::Join:
        - ","
        - - Ref: PubSubnetAz1
          - Ref: PubSubnetAz2
          - Ref: PubSubnetAz3
      LaunchConfigurationName:
        Ref: CoreOSServerLc
      MinSize: "3"
      MaxSize: "12"
      DesiredCapacity:
        Ref: ClusterSize
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Node
        PropagateAtLaunch: "true"
  CoreOSServerLc:
    DependsOn:
    - InternetGateway
    - MasterCoreOSInstance
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceType:
        Ref: InstanceType
      AssociatePublicIpAddress: true
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: NodeCoreOSSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#cloud-config\n\n"
            - "coreos:\n"
            - "  etcd2:\n"
            - "    discovery: "
            - Ref: DiscoveryURL
            - "\n"
            - "    advertise-client-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2379\n"
            - "    initial-advertise-peer-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2380\n"
            - "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n"
            - "    listen-peer-urls: http://$"
            - Ref: AdvertisedIPAddress
            - "_ipv4:2380\n"
            - "  units:\n"
            - "    - name: docker-tcp.socket\n"
            - "      command: start\n"
            - "      enable: true\n"
            - "      content: |\n"
            - "        [Unit]\n"
            - "        Description=Docker Socket for the API\n\n"
            - "        [Socket]\n"
            - "        ListenStream=4243\n"
            - "        BindIPv6Only=both\n"
            - "        Service=docker.service\n\n"
            - "        [Install]\n"
            - "        WantedBy=sockets.target\n"
            - "    - name: etcd2.service\n"
            - "      command: start\n"
            - "    - name: fleet.service\n"
            - "      command: start\n"
            - "    - name: docker-swarm.service\n"
            - "      command: start\n"
            - "      content: |\n"
            - "        [Unit]\n"
            - "        Description=Swarm service\n"
            - "        After=docker.service\n\n"
            - "        [Service]\n"
            - "        Restart=no\n"
            - "        ExecStart=/usr/bin/docker run --name docker-swarm -d swarm
              join --addr=$"
            - Ref: AdvertisedIPAddress
            - _ipv4:4243 etcd://
            - Fn::GetAtt:
              - MasterCoreOSInstance
              - PrivateIp
            - ":2379/swarm\n"
Outputs:
  MasterDockerPs:
    Description: Command to run a "docker ps" on the cluster master
    Value:
      Fn::Join:
      - ""
      - - "docker -H tcp://""
        - Fn::GetAtt:
          - MasterCoreOSInstance
          - PublicIp
        - ":2375 ps"
  MasterPublicIP:
    Description: Public IP for the cluster master
    Value:
      Fn::GetAtt:
      - MasterCoreOSInstance
      - PublicIp
  MasterPrivateIP:
    Description: Private IP for the cluster master
    Value:
      Fn::GetAtt:
      - MasterCoreOSInstance
      - PrivateIp
